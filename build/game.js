/**
 * frontend-nanodegree-arcade-game - v0.1.0 - 2015-11-07
 * This is an autogenerated file which is a concatenation of all JS files in the 
 * "js/" directory. DO NOT edit this file.
 */
(function() {
    /** Make Helpers available globally by setting it a property of window. */
    window.Helpers = {
        /**
         * This function is used to loop through each object property
         * and return all the values as an array
         */
        getObjValues: function(obj) {
            var key, items = obj || {};
            var arr = [];
            for (key in items) {
                if (items.hasOwnProperty(key)) {
                    arr.push(items[key]);
                }
            }

            return arr;
        },
        /**
         * This function is used to loop through each object property
         * and return all the keys as an array
         */
        getObjKeys: function(obj) {
            var key, items = obj || {};
            var arr = [];
            for (key in items) {
                if (items.hasOwnProperty(key)) {
                    arr.push(key);
                }
            }

            return arr;
        },
        /** Used to check if a value is with a range  */
        within: function(value, min, max) {
            return value != null && value >= min && value <= max;
        },
        /** Used to check whether a position is inside the bounds of the game grid */
        withinGrid: function(pos, rows, columns) {
            return pos && Helpers.within(pos.x, 0, columns - 1) && Helpers.within(pos.y, 0, rows - 1);
        }
    };
})();
(function() {
    var resourceCache = {};
    var loading = [];
    var readyCallbacks = [];

    /* This is the publicly accessible image loading function. It accepts
     * an array of strings pointing to image files or a string for a single
     * image. It will then call our private image loading function accordingly.
     */
    function load(urlOrArr) {
        if(urlOrArr instanceof Array) {
            /* If the developer passed in an array of images
             * loop through each value and call our image
             * loader on that image file
             */
            urlOrArr.forEach(function(url) {
                _load(url);
            });
        } else {
            /* The developer did not pass an array to this function,
             * assume the value is a string and call our image loader
             * directly.
             */
            _load(urlOrArr);
        }
    }

    /* This is our private image loader function, it is
     * called by the public image loader function.
     */
    function _load(url) {
        if(resourceCache[url]) {
            /* If this URL has been previously loaded it will exist within
             * our resourceCache array. Just return that image rather
             * re-loading the image.
             */
            return resourceCache[url];
        } else {
            /* This URL has not been previously loaded and is not present
             * within our cache; we'll need to load this image.
             */
            var img = new Image();
            img.onload = function() {
                /* Once our image has properly loaded, add it to our cache
                 * so that we can simply return this image if the developer
                 * attempts to load this file in the future.
                 */
                resourceCache[url] = img;

                /* Once the image is actually loaded and properly cached,
                 * call all of the onReady() callbacks we have defined.
                 */
                if(isReady()) {
                    readyCallbacks.forEach(function(func) { func(); });
                }
            };

            /* Set the initial cache value to false, this will change when
             * the image's onload event handler is called. Finally, point
             * the images src attribute to the passed in URL.
             */
            resourceCache[url] = false;
            img.src = url;
        }
    }

    /* This is used by developer's to grab references to images they know
     * have been previously loaded. If an image is cached, this functions
     * the same as calling load() on that URL.
     */
    function get(url) {
        return resourceCache[url];
    }

    /* This function determines if all of the images that have been requested
     * for loading have in fact been completed loaded.
     */
    function isReady() {
        var ready = true;
        for(var k in resourceCache) {
            if(resourceCache.hasOwnProperty(k) &&
               !resourceCache[k]) {
                ready = false;
            }
        }
        return ready;
    }

    /* This function will add a function to the callback stack that is called
     * when all requested images are properly loaded.
     */
    function onReady(func) {
        readyCallbacks.push(func);
    }

    /* This object defines the publicly accessible functions available to
     * developers by creating a global Resources object.
     */
    window.Resources = {
        load: load,
        get: get,
        onReady: onReady,
        isReady: isReady
    };
})();

(function() {
    var blockHeight = 83;

    /**
     * Create a block by specifying a type and its position
     * @constructor
     */
    var Block = function(type, x, y) {
        this.type = type;
        this.sprite = Block.types[this.type];
        this.x = x;
        this.y = y;
    };

    /** The block types with their image paths as its value */
    Block.types = {
        'grass': 'images/grass-block.png',
        'stone': 'images/stone-block.png',
        'water': 'images/water-block.png'
    };

    /** Get all the images used for Block */
    Block.getSprites = function() {
        return Helpers.getObjValues(Block.types);
    };

    /**
     * Render the block using the context
     * @param {{object}} ctx
     *         The canvas context
     */
    Block.prototype.render = function(ctx) {
        var img = Resources.get(this.sprite);
        ctx.drawImage(img, this.x * img.width, this.y * blockHeight);
    };

    /**
     * Create a Player by specifying the character and its position
     * @constructor
     */
    var Player = function(character, x, y) {
        this.character = character;
        this.sprite = Player.characters[this.character];
        this.x = x;
        this.y = y;
    };

    /** Get all the images used for Player */
    Player.getSprites = function() {
        return Helpers.getObjValues(Player.characters);
    };

    /** The player characters with their image paths as its value */
    Player.characters = {
        'boy': 'images/char-boy.png',
        'cat-girl': 'images/char-cat-girl.png',
        'pink-girl': 'images/char-pink-girl.png'
    };

    /** The list of valid moves with x and y changes it will make */
    Player.validMoves = {
        left: [-1, 0],
        right: [1, 0],
        up: [0, -1],
        down: [0, 1]
    };

    /**
     * Render the player using the context
     * @param {{object}} ctx
     *         The canvas context
     */
    Player.prototype.render = function(ctx) {
        var img = Resources.get(this.sprite);
        ctx.drawImage(img, this.x * img.width, this.y * blockHeight - 10);
    };

    /**
     * Move the player in the grid
     * @param {{string}} move
     *         A valid move defined in Player.validMoves
     * @param {{int}} rows
     *        The number of rows in the grid
     * @param {{int}} columns
     *        The number of columns in the grid
     */
    Player.prototype.move = function(move, rows, columns) {
        var movement = Player.validMoves[move];

        /* Check if move is valid and has x and y values */
        if (!movement || movement.length != 2) {
            return;
        }

        var newX = this.x + movement[0];
        var newY = this.y + movement[1];

        /* Check if the new positions are within the grid before setting it */
        if (Helpers.withinGrid({ x: newX, y: newY }, rows, columns)) {
            this.x = newX;
            this.y = newY;
        }
    };

    /**
     * Create an Enemy by specifying its position and speed
     * @constructor
     */
    var Enemy = function(x, y, speed) {
        this.x = x;
        this.y = y;
        this.speed = speed;
        this.sprite = Enemy.sprite;
    };

    /** The image of the enemy */
    Enemy.sprite = "images/enemy-bug.png";

    /**
     * Render the enemy using the context
     * @param {{object}} ctx
     *         The canvas context
     */
    Enemy.prototype.render = function(ctx) {
        var img = Resources.get(this.sprite);
        ctx.drawImage(img, this.x * img.width, this.y * blockHeight - 20);
    };

    /**
     * Update the position of the enemy by passing the delta time
     * @param {{float}} dt
     *         The delta time or the number of time that passed from the last
     *    time that the canvas is redrawn.
     */
    Enemy.prototype.update = function(dt) {
        this.x += (this.speed * dt);
    };

    /**
     * Reset the position and speed of the enemy
     */
    Enemy.prototype.reset = function() {
        /* position the enemy to the leftmost side of screen minus 1 block */
        this.x = -1;

        /* randomize the y position */
        this.y = Math.floor(Math.random() * 3 + 1);

        /* Set the speed.
         * Minimum is 1 block per second and max is 3 blocks per second.
         */
        this.speed = 1 + Math.random() * 2;
    };

    /* Expose the entities to the outside world so that they can be used in other scripts */
    window.Player = Player;
    window.Block = Block;
    window.Enemy = Enemy;
})();
(function() {
    /**
     * Predefine the variables we'll be using within this scope,
     * create the canvas element, grab the 2D context for that canvas
     * set the canvas elements height/width and add it to the DOM.
     */
    var doc = document,
        win = window,
        canvas = doc.createElement('canvas'),
        ctx = canvas.getContext('2d'),
        nColumns = 5,
        rows = ['water', 'stone', 'stone', 'stone', 'grass', 'grass'],
        nRows = rows.length,
        player = null,
        allEnemies = [],
        blocks = [],
        lastTime,
        paused;

    canvas.width = 505;
    canvas.height = 606;
    doc.body.appendChild(canvas);

    /**
     * This function serves as the kickoff point for the game loop itself
     * and handles properly calling the update and render methods.
     */
    function main() {
        /* Get our time delta information which is required if your game
         * requires smooth animation. Because everyone's computer processes
         * instructions at different speeds we need a constant value that
         * would be the same for everyone (regardless of how fast their
         * computer is) - hurray time!
         */
        var now = Date.now(),
            dt = (now - lastTime) / 1000.0;

        /* Call our update/render functions, pass along the time delta to
         * our update function since it may be used for smooth animation.
         */

        if (!paused) {
            update(dt);
        }
        render();

        /* Set our lastTime variable which is used to determine the time delta
         * for the next time this function is called.
         */
        lastTime = now;

        /* Use the browser's requestAnimationFrame function to call this
         * function again as soon as the browser is able to draw another frame.
         */
        win.requestAnimationFrame(main);
    }

    /**
     * This function does some initial setup that should only occur once,
     * particularly setting the lastTime variable that is required for the
     * game loop.
     */
    function init() {
        reset();

        /* Initialize all entities */
        initEntities();

        lastTime = Date.now();
        main();
    }

    /**
     * This function is called by main (our game loop) and itself calls all
     * of the functions which may need to update entity's data such as updating
     * the position of the enemies. We can also implement our collision detection
     * (when two entities occupy the same space, for instance when your character
     * should die) here.
     */
    function update(dt) {
        updateEntities(dt);
        // checkCollisions();
    }

    /**
     * This is called by the update function  and loops through all of the
     * entities defined in entities.js and calls their update() methods.
     * It will then call the update function for your
     * player object. These update methods should focus purely on updating
     * the data/properties related to  the object. Do the drawing in the
     * render methods.
     */
    function updateEntities(dt) {
        allEnemies.forEach(function(enemy) {
            enemy.update(dt);

            if (enemy.x >= nColumns) {
                enemy.reset();
            }
        });
        //player.update();
    }

    /**
     * This function initially draws the "game level", it will then call
     * the renderEntities function. Remember, this function is called every
     * game tick (or loop of the game engine) because that's how games work -
     * they are flipbooks creating the illusion of animation but in reality
     * they are just drawing the entire screen over and over.
     */
    function render() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        blocks.forEach(function(block) {
            block.render(ctx);
        });

        renderEntities();
    }

    /**
     * This function is called by the render function and is called on each game
     * tick. It's purpose is to then call the render functions you have defined
     * on your enemy and player entities
     */
    function renderEntities() {
        player.render(ctx);

        allEnemies.forEach(function(enemy) {
            enemy.render(ctx);
        });
    }

    /**
     * This function does nothing but it could have been a good place to
     * handle game reset states - maybe a new game menu or a game over screen
     * those sorts of things. It's only called once by the init() method.
     */
    function reset() {
        paused = false;
    }

    /**
     * This function first gets all the images used for all entities then
     * load asynchronously. When all images are now ready we can now
     * initialize the game by calling the init function.
     */
    function loadResources() {
        var images = [];
        images = images.concat(Player.getSprites());
        images = images.concat(Block.getSprites());
        images.push(Enemy.sprite);

        Resources.load(images);
        Resources.onReady(init);
    }

    /**
     * This function is called within the init function which is used
     * to initialize all the entities
     */
    function initEntities() {
        allEnemies = [];
        blocks =  [];

        initBlocks();
        initPlayer();
        initEnemies();
    }

    /** Initialize the player's properties */
    function initPlayer() {
        /* select a random character */
        var characters = Helpers.getObjKeys(Player.characters);
        var charInd = Math.floor(Math.random() * characters.length);

        /* select a ramdom x position */
        var xPos = Math.floor(Math.random() * nColumns);

        /* create the player */
        player = new Player(characters[charInd], xPos, rows.length - 1);
    }

    /**
     * Initialize all the enemies. We create 3 enemies by default and set
     * their position and speed randomly by calling its reset function.
     */
    function initEnemies() {
        var i;
        for (i = 0; i < 3; i++) {
            var enemy = new Enemy();
            enemy.reset();
            allEnemies.push(enemy);
        }
    }

    /** Initialize all the blocks */
    function initBlocks() {
        var row, col;

        for (row = 0; row < nRows; row++) {
            for (col = 0; col < nColumns; col++) {
                blocks.push(new Block(rows[row], col, row));
            }
        }
    }

    /** Handle the keyboard keyup events */
    doc.addEventListener('keyup', function(e) {
        var allowedKeys = {
            37: 'left',
            38: 'up',
            39: 'right',
            40: 'down'
        };

        var move = allowedKeys[e.keyCode];

        /*
         * Move only when player is already loaded, a valid key is pressed,
         * and the game is not paused.
         */
        if (player && move && !paused) {
            player.move(move, nRows, nColumns);
        }

        switch (e.keyCode) {
            case 27: // Escape key
                paused = !paused; // Toggle pause
                break;
        }
    });

    /**
     * Expose the engine to the outside world with only some few functions
     * made public.
     */
    window.Engine = {
        init: loadResources
    };

})(this);
Engine.init();